#基于表单的过滤器身份验证，此验证与shiro.ini代表的普通验证是类似的，但是更为简单因为包括subject.login在内的
#登录验证内容都通过authc拦截器实现了，这里需要注意的是authc拦截器默认实现是org.apache.shiro.web.filter.authc.FormAuthenticationFilter
#其内部判断请求是否是登录请求（loginUrl指定）并且是否是HTTP POST请求，若是获取请求中的usernameParam和passwordParam参数然后自动调用一次
#subject.login方法进行一次登录尝试（具体说明可以参考其API说明）。
#疑问：为什么shiro.ini也使用了authc过滤器为什么还要在servlet中调用subject.login方法？
#这是因为shiro.ini中的/login=anon请求走得是anno（匿名验证）的过滤器，没有走authc的因此其内部的subject.login
#方法就没有执行，本例中的登录请求/formfilterlogin=authc走了authc所以可以使用其内部的默认逻辑。
#如果请求的url并非是loginurl则不走默认的登录验证流程，只走其他验证（比如判断用户是否登录不登录则无权访问页面，重定向等）
[main]
authc.loginUrl=/formfilterlogin
authc.usernameParam=username
authc.passwordParam=password
authc.successUrl=/
#登录失败后设置在request里的错误信息的key值
authc.failureKeyAttribute=shiroLoginFailure

perms.unauthorizedUrl=/unauthorized
roles.unauthorizedUrl=/unauthorized

[users]
zhang=123,admin
wang=123

[roles]
admin=user:*,menu:*

[urls]
/static/**=anon
/formfilterlogin=authc
/role=authc,roles[admin]
/permission=authc,perms["user:create"]


